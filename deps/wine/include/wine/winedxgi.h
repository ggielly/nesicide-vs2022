/*** Autogenerated by WIDL 1.5.23 from wine/winedxgi.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __winedxgi_h__
#define __winedxgi_h__

/* Forward declarations */

#ifndef __IWineDXGIFactory_FWD_DEFINED__
#define __IWineDXGIFactory_FWD_DEFINED__
typedef interface IWineDXGIFactory IWineDXGIFactory;
#endif

#ifndef __IWineDXGIAdapter_FWD_DEFINED__
#define __IWineDXGIAdapter_FWD_DEFINED__
typedef interface IWineDXGIAdapter IWineDXGIAdapter;
#endif

#ifndef __IWineDXGIDevice_FWD_DEFINED__
#define __IWineDXGIDevice_FWD_DEFINED__
typedef interface IWineDXGIDevice IWineDXGIDevice;
#endif

#ifndef __IWineDXGIDeviceParent_FWD_DEFINED__
#define __IWineDXGIDeviceParent_FWD_DEFINED__
typedef interface IWineDXGIDeviceParent IWineDXGIDeviceParent;
#endif

/* Headers for imported files */

#include <dxgi.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IWineDXGIFactory interface
 */
#ifndef __IWineDXGIFactory_INTERFACE_DEFINED__
#define __IWineDXGIFactory_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDXGIFactory, 0xa07ad9ab, 0xfb01, 0x4574, 0x8b,0xfb, 0x0a,0x70,0xa7,0x37,0x3f,0x04);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a07ad9ab-fb01-4574-8bfb-0a70a7373f04")
IWineDXGIFactory : public IDXGIFactory
{
    virtual struct wined3d * STDMETHODCALLTYPE get_wined3d(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDXGIFactory, 0xa07ad9ab, 0xfb01, 0x4574, 0x8b,0xfb, 0x0a,0x70,0xa7,0x37,0x3f,0x04)
#endif
#else
typedef struct IWineDXGIFactoryVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDXGIFactory* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDXGIFactory* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDXGIFactory* This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IWineDXGIFactory* This,
        REFGUID guid,
        UINT data_size,
        const void *data);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IWineDXGIFactory* This,
        REFGUID guid,
        const IUnknown *object);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IWineDXGIFactory* This,
        REFGUID guid,
        UINT *data_size,
        void *data);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IWineDXGIFactory* This,
        REFIID riid,
        void **parent);

    /*** IDXGIFactory methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapters)(
        IWineDXGIFactory* This,
        UINT adapter_idx,
        IDXGIAdapter **adapter);

    HRESULT (STDMETHODCALLTYPE *MakeWindowAssociation)(
        IWineDXGIFactory* This,
        HWND window,
        UINT flags);

    HRESULT (STDMETHODCALLTYPE *GetWindowAssociation)(
        IWineDXGIFactory* This,
        HWND *window);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChain)(
        IWineDXGIFactory* This,
        IUnknown *device,
        DXGI_SWAP_CHAIN_DESC *desc,
        IDXGISwapChain **swapchain);

    HRESULT (STDMETHODCALLTYPE *CreateSoftwareAdapter)(
        IWineDXGIFactory* This,
        HMODULE swrast,
        IDXGIAdapter **adapter);

    /*** IWineDXGIFactory methods ***/
    struct wined3d * (STDMETHODCALLTYPE *get_wined3d)(
        IWineDXGIFactory* This);

    END_INTERFACE
} IWineDXGIFactoryVtbl;
interface IWineDXGIFactory {
    CONST_VTBL IWineDXGIFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDXGIFactory_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDXGIFactory_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDXGIFactory_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IWineDXGIFactory_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
#define IWineDXGIFactory_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
#define IWineDXGIFactory_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
#define IWineDXGIFactory_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
/*** IDXGIFactory methods ***/
#define IWineDXGIFactory_EnumAdapters(This,adapter_idx,adapter) (This)->lpVtbl->EnumAdapters(This,adapter_idx,adapter)
#define IWineDXGIFactory_MakeWindowAssociation(This,window,flags) (This)->lpVtbl->MakeWindowAssociation(This,window,flags)
#define IWineDXGIFactory_GetWindowAssociation(This,window) (This)->lpVtbl->GetWindowAssociation(This,window)
#define IWineDXGIFactory_CreateSwapChain(This,device,desc,swapchain) (This)->lpVtbl->CreateSwapChain(This,device,desc,swapchain)
#define IWineDXGIFactory_CreateSoftwareAdapter(This,swrast,adapter) (This)->lpVtbl->CreateSoftwareAdapter(This,swrast,adapter)
/*** IWineDXGIFactory methods ***/
#define IWineDXGIFactory_get_wined3d(This) (This)->lpVtbl->get_wined3d(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineDXGIFactory_QueryInterface(IWineDXGIFactory* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineDXGIFactory_AddRef(IWineDXGIFactory* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineDXGIFactory_Release(IWineDXGIFactory* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IWineDXGIFactory_SetPrivateData(IWineDXGIFactory* This,REFGUID guid,UINT data_size,const void *data) {
    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIFactory_SetPrivateDataInterface(IWineDXGIFactory* This,REFGUID guid,const IUnknown *object) {
    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
}
static FORCEINLINE HRESULT IWineDXGIFactory_GetPrivateData(IWineDXGIFactory* This,REFGUID guid,UINT *data_size,void *data) {
    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIFactory_GetParent(IWineDXGIFactory* This,REFIID riid,void **parent) {
    return This->lpVtbl->GetParent(This,riid,parent);
}
/*** IDXGIFactory methods ***/
static FORCEINLINE HRESULT IWineDXGIFactory_EnumAdapters(IWineDXGIFactory* This,UINT adapter_idx,IDXGIAdapter **adapter) {
    return This->lpVtbl->EnumAdapters(This,adapter_idx,adapter);
}
static FORCEINLINE HRESULT IWineDXGIFactory_MakeWindowAssociation(IWineDXGIFactory* This,HWND window,UINT flags) {
    return This->lpVtbl->MakeWindowAssociation(This,window,flags);
}
static FORCEINLINE HRESULT IWineDXGIFactory_GetWindowAssociation(IWineDXGIFactory* This,HWND *window) {
    return This->lpVtbl->GetWindowAssociation(This,window);
}
static FORCEINLINE HRESULT IWineDXGIFactory_CreateSwapChain(IWineDXGIFactory* This,IUnknown *device,DXGI_SWAP_CHAIN_DESC *desc,IDXGISwapChain **swapchain) {
    return This->lpVtbl->CreateSwapChain(This,device,desc,swapchain);
}
static FORCEINLINE HRESULT IWineDXGIFactory_CreateSoftwareAdapter(IWineDXGIFactory* This,HMODULE swrast,IDXGIAdapter **adapter) {
    return This->lpVtbl->CreateSoftwareAdapter(This,swrast,adapter);
}
/*** IWineDXGIFactory methods ***/
static FORCEINLINE struct wined3d * IWineDXGIFactory_get_wined3d(IWineDXGIFactory* This) {
    return This->lpVtbl->get_wined3d(This);
}
#endif
#endif

#endif

struct wined3d * STDMETHODCALLTYPE IWineDXGIFactory_get_wined3d_Proxy(
    IWineDXGIFactory* This);
void __RPC_STUB IWineDXGIFactory_get_wined3d_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWineDXGIFactory_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineDXGIAdapter interface
 */
#ifndef __IWineDXGIAdapter_INTERFACE_DEFINED__
#define __IWineDXGIAdapter_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDXGIAdapter, 0xab1de34c, 0x2963, 0x4ffd, 0x84,0x93, 0x40,0xf5,0x80,0xe5,0x10,0xe5);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ab1de34c-2963-4ffd-8493-40f580e510e5")
IWineDXGIAdapter : public IDXGIAdapter
{
    virtual UINT STDMETHODCALLTYPE get_ordinal(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDXGIAdapter, 0xab1de34c, 0x2963, 0x4ffd, 0x84,0x93, 0x40,0xf5,0x80,0xe5,0x10,0xe5)
#endif
#else
typedef struct IWineDXGIAdapterVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDXGIAdapter* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDXGIAdapter* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDXGIAdapter* This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IWineDXGIAdapter* This,
        REFGUID guid,
        UINT data_size,
        const void *data);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IWineDXGIAdapter* This,
        REFGUID guid,
        const IUnknown *object);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IWineDXGIAdapter* This,
        REFGUID guid,
        UINT *data_size,
        void *data);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IWineDXGIAdapter* This,
        REFIID riid,
        void **parent);

    /*** IDXGIAdapter methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumOutputs)(
        IWineDXGIAdapter* This,
        UINT output_idx,
        IDXGIOutput **output);

    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IWineDXGIAdapter* This,
        DXGI_ADAPTER_DESC *desc);

    HRESULT (STDMETHODCALLTYPE *CheckInterfaceSupport)(
        IWineDXGIAdapter* This,
        REFGUID guid,
        LARGE_INTEGER *umd_version);

    /*** IWineDXGIAdapter methods ***/
    UINT (STDMETHODCALLTYPE *get_ordinal)(
        IWineDXGIAdapter* This);

    END_INTERFACE
} IWineDXGIAdapterVtbl;
interface IWineDXGIAdapter {
    CONST_VTBL IWineDXGIAdapterVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDXGIAdapter_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDXGIAdapter_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDXGIAdapter_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IWineDXGIAdapter_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
#define IWineDXGIAdapter_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
#define IWineDXGIAdapter_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
#define IWineDXGIAdapter_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
/*** IDXGIAdapter methods ***/
#define IWineDXGIAdapter_EnumOutputs(This,output_idx,output) (This)->lpVtbl->EnumOutputs(This,output_idx,output)
#define IWineDXGIAdapter_GetDesc(This,desc) (This)->lpVtbl->GetDesc(This,desc)
#define IWineDXGIAdapter_CheckInterfaceSupport(This,guid,umd_version) (This)->lpVtbl->CheckInterfaceSupport(This,guid,umd_version)
/*** IWineDXGIAdapter methods ***/
#define IWineDXGIAdapter_get_ordinal(This) (This)->lpVtbl->get_ordinal(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineDXGIAdapter_QueryInterface(IWineDXGIAdapter* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineDXGIAdapter_AddRef(IWineDXGIAdapter* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineDXGIAdapter_Release(IWineDXGIAdapter* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IWineDXGIAdapter_SetPrivateData(IWineDXGIAdapter* This,REFGUID guid,UINT data_size,const void *data) {
    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_SetPrivateDataInterface(IWineDXGIAdapter* This,REFGUID guid,const IUnknown *object) {
    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_GetPrivateData(IWineDXGIAdapter* This,REFGUID guid,UINT *data_size,void *data) {
    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_GetParent(IWineDXGIAdapter* This,REFIID riid,void **parent) {
    return This->lpVtbl->GetParent(This,riid,parent);
}
/*** IDXGIAdapter methods ***/
static FORCEINLINE HRESULT IWineDXGIAdapter_EnumOutputs(IWineDXGIAdapter* This,UINT output_idx,IDXGIOutput **output) {
    return This->lpVtbl->EnumOutputs(This,output_idx,output);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_GetDesc(IWineDXGIAdapter* This,DXGI_ADAPTER_DESC *desc) {
    return This->lpVtbl->GetDesc(This,desc);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_CheckInterfaceSupport(IWineDXGIAdapter* This,REFGUID guid,LARGE_INTEGER *umd_version) {
    return This->lpVtbl->CheckInterfaceSupport(This,guid,umd_version);
}
/*** IWineDXGIAdapter methods ***/
static FORCEINLINE UINT IWineDXGIAdapter_get_ordinal(IWineDXGIAdapter* This) {
    return This->lpVtbl->get_ordinal(This);
}
#endif
#endif

#endif

UINT STDMETHODCALLTYPE IWineDXGIAdapter_get_ordinal_Proxy(
    IWineDXGIAdapter* This);
void __RPC_STUB IWineDXGIAdapter_get_ordinal_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWineDXGIAdapter_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineDXGIDevice interface
 */
#ifndef __IWineDXGIDevice_INTERFACE_DEFINED__
#define __IWineDXGIDevice_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDXGIDevice, 0x3e1ff30b, 0xc951, 0x48c3, 0xb0,0x10, 0x0f,0xb4,0x9f,0x3d,0xca,0x71);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3e1ff30b-c951-48c3-b010-0fb49f3dca71")
IWineDXGIDevice : public IDXGIDevice
{
    virtual struct wined3d_device * STDMETHODCALLTYPE get_wined3d_device(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE create_surface(
        const DXGI_SURFACE_DESC *desc,
        DXGI_USAGE usage,
        const DXGI_SHARED_RESOURCE *shared_resource,
        IUnknown *outer,
        void **surface) = 0;

    virtual HRESULT STDMETHODCALLTYPE create_swapchain(
        struct wined3d_swapchain_desc *desc,
        struct wined3d_swapchain **wined3d_swapchain) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDXGIDevice, 0x3e1ff30b, 0xc951, 0x48c3, 0xb0,0x10, 0x0f,0xb4,0x9f,0x3d,0xca,0x71)
#endif
#else
typedef struct IWineDXGIDeviceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDXGIDevice* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDXGIDevice* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDXGIDevice* This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IWineDXGIDevice* This,
        REFGUID guid,
        UINT data_size,
        const void *data);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IWineDXGIDevice* This,
        REFGUID guid,
        const IUnknown *object);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IWineDXGIDevice* This,
        REFGUID guid,
        UINT *data_size,
        void *data);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IWineDXGIDevice* This,
        REFIID riid,
        void **parent);

    /*** IDXGIDevice methods ***/
    HRESULT (STDMETHODCALLTYPE *GetAdapter)(
        IWineDXGIDevice* This,
        IDXGIAdapter **adapter);

    HRESULT (STDMETHODCALLTYPE *CreateSurface)(
        IWineDXGIDevice* This,
        const DXGI_SURFACE_DESC *desc,
        UINT surface_count,
        DXGI_USAGE usage,
        const DXGI_SHARED_RESOURCE *shared_resource,
        IDXGISurface **surface);

    HRESULT (STDMETHODCALLTYPE *QueryResourceResidency)(
        IWineDXGIDevice* This,
        IUnknown *const *resources,
        DXGI_RESIDENCY *residency,
        UINT resource_count);

    HRESULT (STDMETHODCALLTYPE *SetGPUThreadPriority)(
        IWineDXGIDevice* This,
        INT priority);

    HRESULT (STDMETHODCALLTYPE *GetGPUThreadPriority)(
        IWineDXGIDevice* This,
        INT *priority);

    /*** IWineDXGIDevice methods ***/
    struct wined3d_device * (STDMETHODCALLTYPE *get_wined3d_device)(
        IWineDXGIDevice* This);

    HRESULT (STDMETHODCALLTYPE *create_surface)(
        IWineDXGIDevice* This,
        const DXGI_SURFACE_DESC *desc,
        DXGI_USAGE usage,
        const DXGI_SHARED_RESOURCE *shared_resource,
        IUnknown *outer,
        void **surface);

    HRESULT (STDMETHODCALLTYPE *create_swapchain)(
        IWineDXGIDevice* This,
        struct wined3d_swapchain_desc *desc,
        struct wined3d_swapchain **wined3d_swapchain);

    END_INTERFACE
} IWineDXGIDeviceVtbl;
interface IWineDXGIDevice {
    CONST_VTBL IWineDXGIDeviceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDXGIDevice_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDXGIDevice_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDXGIDevice_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IWineDXGIDevice_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
#define IWineDXGIDevice_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
#define IWineDXGIDevice_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
#define IWineDXGIDevice_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
/*** IDXGIDevice methods ***/
#define IWineDXGIDevice_GetAdapter(This,adapter) (This)->lpVtbl->GetAdapter(This,adapter)
#define IWineDXGIDevice_CreateSurface(This,desc,surface_count,usage,shared_resource,surface) (This)->lpVtbl->CreateSurface(This,desc,surface_count,usage,shared_resource,surface)
#define IWineDXGIDevice_QueryResourceResidency(This,resources,residency,resource_count) (This)->lpVtbl->QueryResourceResidency(This,resources,residency,resource_count)
#define IWineDXGIDevice_SetGPUThreadPriority(This,priority) (This)->lpVtbl->SetGPUThreadPriority(This,priority)
#define IWineDXGIDevice_GetGPUThreadPriority(This,priority) (This)->lpVtbl->GetGPUThreadPriority(This,priority)
/*** IWineDXGIDevice methods ***/
#define IWineDXGIDevice_get_wined3d_device(This) (This)->lpVtbl->get_wined3d_device(This)
#define IWineDXGIDevice_create_surface(This,desc,usage,shared_resource,outer,surface) (This)->lpVtbl->create_surface(This,desc,usage,shared_resource,outer,surface)
#define IWineDXGIDevice_create_swapchain(This,desc,wined3d_swapchain) (This)->lpVtbl->create_swapchain(This,desc,wined3d_swapchain)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_QueryInterface(IWineDXGIDevice* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineDXGIDevice_AddRef(IWineDXGIDevice* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineDXGIDevice_Release(IWineDXGIDevice* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_SetPrivateData(IWineDXGIDevice* This,REFGUID guid,UINT data_size,const void *data) {
    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIDevice_SetPrivateDataInterface(IWineDXGIDevice* This,REFGUID guid,const IUnknown *object) {
    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
}
static FORCEINLINE HRESULT IWineDXGIDevice_GetPrivateData(IWineDXGIDevice* This,REFGUID guid,UINT *data_size,void *data) {
    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIDevice_GetParent(IWineDXGIDevice* This,REFIID riid,void **parent) {
    return This->lpVtbl->GetParent(This,riid,parent);
}
/*** IDXGIDevice methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_GetAdapter(IWineDXGIDevice* This,IDXGIAdapter **adapter) {
    return This->lpVtbl->GetAdapter(This,adapter);
}
static FORCEINLINE HRESULT IWineDXGIDevice_CreateSurface(IWineDXGIDevice* This,const DXGI_SURFACE_DESC *desc,UINT surface_count,DXGI_USAGE usage,const DXGI_SHARED_RESOURCE *shared_resource,IDXGISurface **surface) {
    return This->lpVtbl->CreateSurface(This,desc,surface_count,usage,shared_resource,surface);
}
static FORCEINLINE HRESULT IWineDXGIDevice_QueryResourceResidency(IWineDXGIDevice* This,IUnknown *const *resources,DXGI_RESIDENCY *residency,UINT resource_count) {
    return This->lpVtbl->QueryResourceResidency(This,resources,residency,resource_count);
}
static FORCEINLINE HRESULT IWineDXGIDevice_SetGPUThreadPriority(IWineDXGIDevice* This,INT priority) {
    return This->lpVtbl->SetGPUThreadPriority(This,priority);
}
static FORCEINLINE HRESULT IWineDXGIDevice_GetGPUThreadPriority(IWineDXGIDevice* This,INT *priority) {
    return This->lpVtbl->GetGPUThreadPriority(This,priority);
}
/*** IWineDXGIDevice methods ***/
static FORCEINLINE struct wined3d_device * IWineDXGIDevice_get_wined3d_device(IWineDXGIDevice* This) {
    return This->lpVtbl->get_wined3d_device(This);
}
static FORCEINLINE HRESULT IWineDXGIDevice_create_surface(IWineDXGIDevice* This,const DXGI_SURFACE_DESC *desc,DXGI_USAGE usage,const DXGI_SHARED_RESOURCE *shared_resource,IUnknown *outer,void **surface) {
    return This->lpVtbl->create_surface(This,desc,usage,shared_resource,outer,surface);
}
static FORCEINLINE HRESULT IWineDXGIDevice_create_swapchain(IWineDXGIDevice* This,struct wined3d_swapchain_desc *desc,struct wined3d_swapchain **wined3d_swapchain) {
    return This->lpVtbl->create_swapchain(This,desc,wined3d_swapchain);
}
#endif
#endif

#endif

struct wined3d_device * STDMETHODCALLTYPE IWineDXGIDevice_get_wined3d_device_Proxy(
    IWineDXGIDevice* This);
void __RPC_STUB IWineDXGIDevice_get_wined3d_device_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineDXGIDevice_create_surface_Proxy(
    IWineDXGIDevice* This,
    const DXGI_SURFACE_DESC *desc,
    DXGI_USAGE usage,
    const DXGI_SHARED_RESOURCE *shared_resource,
    IUnknown *outer,
    void **surface);
void __RPC_STUB IWineDXGIDevice_create_surface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineDXGIDevice_create_swapchain_Proxy(
    IWineDXGIDevice* This,
    struct wined3d_swapchain_desc *desc,
    struct wined3d_swapchain **wined3d_swapchain);
void __RPC_STUB IWineDXGIDevice_create_swapchain_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWineDXGIDevice_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineDXGIDeviceParent interface
 */
#ifndef __IWineDXGIDeviceParent_INTERFACE_DEFINED__
#define __IWineDXGIDeviceParent_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDXGIDeviceParent, 0xf2b918f3, 0x603f, 0x430a, 0x9c,0xcd, 0x55,0x87,0x2b,0x6e,0x85,0xdf);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f2b918f3-603f-430a-9ccd-55872b6e85df")
IWineDXGIDeviceParent : public IUnknown
{
    virtual struct wined3d_device_parent * STDMETHODCALLTYPE get_wined3d_device_parent(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDXGIDeviceParent, 0xf2b918f3, 0x603f, 0x430a, 0x9c,0xcd, 0x55,0x87,0x2b,0x6e,0x85,0xdf)
#endif
#else
typedef struct IWineDXGIDeviceParentVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDXGIDeviceParent* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDXGIDeviceParent* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDXGIDeviceParent* This);

    /*** IWineDXGIDeviceParent methods ***/
    struct wined3d_device_parent * (STDMETHODCALLTYPE *get_wined3d_device_parent)(
        IWineDXGIDeviceParent* This);

    END_INTERFACE
} IWineDXGIDeviceParentVtbl;
interface IWineDXGIDeviceParent {
    CONST_VTBL IWineDXGIDeviceParentVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDXGIDeviceParent_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDXGIDeviceParent_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDXGIDeviceParent_Release(This) (This)->lpVtbl->Release(This)
/*** IWineDXGIDeviceParent methods ***/
#define IWineDXGIDeviceParent_get_wined3d_device_parent(This) (This)->lpVtbl->get_wined3d_device_parent(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineDXGIDeviceParent_QueryInterface(IWineDXGIDeviceParent* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineDXGIDeviceParent_AddRef(IWineDXGIDeviceParent* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineDXGIDeviceParent_Release(IWineDXGIDeviceParent* This) {
    return This->lpVtbl->Release(This);
}
/*** IWineDXGIDeviceParent methods ***/
static FORCEINLINE struct wined3d_device_parent * IWineDXGIDeviceParent_get_wined3d_device_parent(IWineDXGIDeviceParent* This) {
    return This->lpVtbl->get_wined3d_device_parent(This);
}
#endif
#endif

#endif

struct wined3d_device_parent * STDMETHODCALLTYPE IWineDXGIDeviceParent_get_wined3d_device_parent_Proxy(
    IWineDXGIDeviceParent* This);
void __RPC_STUB IWineDXGIDeviceParent_get_wined3d_device_parent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWineDXGIDeviceParent_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __winedxgi_h__ */
